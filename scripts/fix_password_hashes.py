#!/usr/bin/env python3
"""
Script para corregir las contrase√±as hasheadas en la base de datos.

Este script soluciona el problema de "Invalid hash method" regenerando
todas las contrase√±as en la base de datos usando bcrypt de manera consistente.
"""

import os
import sys
import bcrypt
import logging
from pathlib import Path

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Agregar el directorio ra√≠z al PYTHONPATH
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# Importar despu√©s de configurar el path
try:
    from app.database import get_db_session, close_db_session
    from app.models.seguridad import TbUsuario
except ImportError as e:
    print(f"‚ùå Error de importaci√≥n: {e}")
    print("üí° Aseg√∫rate de estar en el directorio correcto y tener todas las dependencias instaladas")
    sys.exit(1)

def fix_password_hashes():
    """
    Corregir todas las contrase√±as hasheadas en la base de datos.
    """
    print("üîß Corrigiendo hashes de contrase√±as...")
    
    try:
        session = get_db_session()
        
        # Obtener todos los usuarios
        usuarios = session.query(TbUsuario).all()
        
        if not usuarios:
            print("‚ÑπÔ∏è No hay usuarios en la base de datos")
            return True
        
        print(f"üìù Encontrados {len(usuarios)} usuarios para corregir")
        
        # Contrase√±a por defecto para regenerar
        default_password = "Admin123!"
        
        for i, usuario in enumerate(usuarios, 1):
            try:
                # Regenerar el hash de la contrase√±a usando bcrypt
                new_hash = bcrypt.hashpw(default_password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
                
                # Actualizar la contrase√±a en la base de datos
                usuario._password = new_hash
                
                print(f"‚úÖ Usuario {i}/{len(usuarios)}: {usuario.username} - Hash corregido")
                
            except Exception as e:
                print(f"‚ùå Error al corregir usuario {usuario.username}: {e}")
                continue
        
        # Guardar todos los cambios
        session.commit()
        print(f"üíæ Cambios guardados en la base de datos")
        
        print("\nüìã Resumen:")
        print(f"   - Usuarios procesados: {len(usuarios)}")
        print(f"   - Contrase√±a por defecto: {default_password}")
        print(f"   - M√©todo de hash: bcrypt")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error al corregir hashes: {e}")
        return False
    finally:
        close_db_session(session)

def verify_fix():
    """
    Verificar que las contrase√±as se corrigieron correctamente.
    """
    print("\nüîç Verificando correcci√≥n...")
    
    try:
        session = get_db_session()
        
        # Buscar el usuario admin
        usuario = session.query(TbUsuario).filter_by(username="admin").first()
        
        if not usuario:
            print("‚ùå Usuario admin no encontrado")
            return False
        
        # Intentar verificar la contrase√±a
        test_password = "Admin123!"
        if usuario.verify_password(test_password):
            print("‚úÖ Verificaci√≥n exitosa - El hash funciona correctamente")
            return True
        else:
            print("‚ùå Verificaci√≥n fallida - El hash a√∫n no funciona")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en verificaci√≥n: {e}")
        return False
    finally:
        close_db_session(session)

def main():
    """Funci√≥n principal."""
    print("üöÄ Correcci√≥n de Hashes de Contrase√±as - APIAquaMind")
    print("=" * 60)
    
    # 1. Corregir hashes
    if not fix_password_hashes():
        print("\n‚ùå No se pudieron corregir los hashes.")
        return
    
    # 2. Verificar correcci√≥n
    if not verify_fix():
        print("\n‚ùå La correcci√≥n no funcion√≥ correctamente.")
        return
    
    print("\nüéâ Correcci√≥n completada exitosamente!")
    print("\nüìù Informaci√≥n importante:")
    print("   - Todas las contrase√±as fueron reseteadas a: Admin123!")
    print("   - Los hashes ahora usan bcrypt de manera consistente")
    print("   - El error 'Invalid hash method' deber√≠a estar resuelto")
    print("\nüîê Pr√≥ximos pasos:")
    print("   1. Probar login con: admin / Admin123!")
    print("   2. Cambiar contrase√±as por seguridad")
    print("   3. Ejecutar la aplicaci√≥n: python start.py")

if __name__ == '__main__':
    main() 